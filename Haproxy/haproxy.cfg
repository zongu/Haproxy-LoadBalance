global  
  # 瞬間最大連線數
  maxconn 60000
  daemon

defaults
  mode http
  timeout connect 10s
  # client跟Haproxy超過多久沒有互動會被斷線(default:無限制)
  timeout client  300s
  # client透過Haproxy跟後端超過多久沒有互動會被斷線(default:50s)
  timeout server  300s

backend handler-9001
  # 尾巴check加上HC機制
  server api1 api1:9001 check
  server api2 api2:9001 check

backend handler-9002
  # IP_Hash配置
  balance source
  hash-type consistent
  server api3 api3:9002 check
  server api4 api4:9002 check

frontend front
  # 監聽port
  bind :9001
  bind :9002

  # 驗證JWT
  # 確認header是否有bearer
  http-request deny content-type 'text/html' string 'Missing Authorization HTTP header' unless { req.hdr(authorization) -m found }

  # 將bearer塞到變數txn.bearer備用
  http-request set-var(txn.bearer) http_auth_bearer
  # 將txn.bearer的alg塞到變數txn.alg備用
  http-request set-var(txn.alg) var(txn.bearer),jwt_header_query('$.alg')
  # 驗證alg是否為合法的加密字串 這邊要注意 jwt_verify(<alg>,<key>) 
  # 如果用的是HS256(HMAC)加密 所以要哈扣寫死密鑰 
  # 官方提供路徑原因用的是RSA/EC(RS256/ES256)所以可以帶指定路徑且副檔名須為.pem
  http-request set-var(txn.jwt_verified) var(txn.bearer),jwt_verify(txn.alg,'my-secret-string')
  http-request deny content-type 'text/html' string 'Invalid JWT signature or unsupported algorithm' unless { var(txn.jwt_verified) -m int 1 }

  http-request set-var(txn.exp) var(txn.bearer),jwt_payload_query('$.exp','int')
  http-request set-var(txn.now) date()
  http-request deny content-type 'text/html' string 'Expired JWT token' if { var(txn.exp),sub(txn.now) -m int lt 0 }

  # 當來源以9001 port拜訪則導向handler-9001
  use_backend handler-9001 if { dst_port 9001 }
  use_backend handler-9002 if { dst_port 9002 }
